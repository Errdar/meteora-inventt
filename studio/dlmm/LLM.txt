# LLM.txt - Dynamic Liquidity Market Maker (DLMM)

This directory contains AI-automatable scripts for managing concentrated liquidity positions using Meteora's DLMM protocol.

## DLMM Overview

Dynamic Liquidity Market Maker features:
- Concentrated liquidity in specific price ranges (bins)
- Dynamic fees that adjust with volatility
- Capital efficiency through precise positioning
- Multiple strategies (balanced, imbalanced, custom)
- Real-time fee optimization

## Available Scripts

### 1. Create Balanced Position (`pnpm studio dlmm-create-balanced-position`)
**Location**: `create-position/src/create-balanced-position.ts`
**Key Parameters**:
```typescript
const positionParams = {
  poolAddress: new PublicKey('...'),    // DLMM pool address
  totalAmount: 1000,                    // Total value in base token
  distributionRange: 50,                // Number of bins (price points)
  slippageBps: 100,                    // Slippage tolerance (1%)
};
```

### 2. Create Imbalanced Position (`pnpm studio dlmm-create-imbalanced-position`)
**Location**: `create-position/src/create-imbalanced-position.ts`
**Key Parameters**:
```typescript
const positionParams = {
  poolAddress: new PublicKey('...'),    // DLMM pool address
  totalAmount: 1000,                    // Total value
  weight: 0.7,                          // 70% on one side
  side: 'buy' | 'sell',                 // Direction bias
  distributionRange: 30,                // Number of bins
};
```

### 3. Get Active Bin (`pnpm studio dlmm-get-active-bin`)
**Location**: `create-position/src/get-active-bin.ts`

### 4. Get Positions List (`pnpm studio dlmm-get-positions-list`)
**Location**: `manage-position/src/get-positions-list.ts`

### 5. Add Balanced Liquidity (`pnpm studio dlmm-add-balanced-liquidity`)
**Location**: `manage-position/src/add-balanced-liquidity.ts`

### 6. Add Imbalanced Liquidity (`pnpm studio dlmm-add-imbalanced-liquidity`)
**Location**: `manage-position/src/add-imbalanced-liquidity.ts`

### 7. Withdraw Liquidity (`pnpm studio dlmm-withdraw-liquidity`)
**Location**: `manage-position/src/withdraw-liquidity.ts`

### 8. Claim Fees (`pnpm studio dlmm-claim-fees`)
**Location**: `claim-fees/src/claim-fees.ts`

## Understanding DLMM Concepts

### Bins
- Each bin represents a specific price point
- Liquidity is placed in discrete bins
- Current trading happens in the "active bin"
- Price moves by jumping between bins

### Bin Step
- The price difference between adjacent bins
- Smaller steps = more precise positioning
- Larger steps = wider coverage
- Common: 1-10 basis points

### Distribution Strategies

#### Balanced (Spot)
```
    │││││││││││
────┼─────────┼────
    ↑ current price
```
- Equal on both sides
- For ranging markets
- Captures fees from both directions

#### Imbalanced (Directional)
```
    ││││││││
────┼───────────┼──
    ↑ current price
```
- Weighted to one side
- For trending markets
- Expresses directional view

#### Custom (Advanced)
- Specific bin selection
- Multiple ranges
- Complex strategies

## Position Creation Workflow

### 1. Analyze Market Conditions
```bash
# Check current price and volatility
pnpm studio dlmm-get-active-bin
```

### 2. Choose Strategy
- **Balanced**: Expect price to range
- **Buy-weighted**: Expect price to rise
- **Sell-weighted**: Expect price to fall

### 3. Configure Position
Edit appropriate script:
```typescript
const poolAddress = new PublicKey('POOL_ADDRESS');
const totalAmount = 10000; // USDC value
const distributionRange = 40; // 40 bins
const slippageBps = 100; // 1% slippage
```

### 4. Create Position
```bash
# For balanced strategy
pnpm studio dlmm-create-balanced-position

# For directional strategy
pnpm studio dlmm-create-imbalanced-position
```

## Fee Optimization

### Dynamic Fees
DLMM automatically adjusts fees based on:
- Market volatility
- Trading volume
- Price impact

### Fee Tiers by Volatility
- **Low volatility**: 0.1-0.3%
- **Medium volatility**: 0.3-0.8%
- **High volatility**: 0.8-2.0%

### Maximizing Fee Income
1. Position around active trading ranges
2. Rebalance when price moves significantly
3. Use wider ranges in volatile markets
4. Concentrate in stable markets

## Position Management

### Monitoring Positions
```bash
# List all positions
pnpm studio dlmm-get-positions-list

# Check specific pool state
pnpm studio dlmm-get-active-bin
```

### When to Rebalance
- Price moved outside your range
- Significant market regime change
- Better opportunities elsewhere
- Risk management needs

### Adding Liquidity
```bash
# Add to existing position
pnpm studio dlmm-add-balanced-liquidity
```

### Removing Liquidity
```bash
# Partial or full withdrawal
pnpm studio dlmm-withdraw-liquidity
```

## Common Issues and Solutions

### "No liquidity in range"
- Price moved outside your bins
- Withdraw and reposition
- Or wait for price to return

### "High price impact"
- Reduce position size
- Increase slippage tolerance
- Use more bins for distribution

### "Bin array mismatch"
- Ensure bin IDs are correct
- Check pool configuration
- Verify distribution parameters

## Strategy Examples

### 1. Range Trading Strategy
```typescript
// 20 bins on each side of current price
const distributionRange = 40;
const weight = 0.5; // Perfectly balanced
```

### 2. Accumulation Strategy
```typescript
// 70% below current price
const weight = 0.3;
const side = 'buy';
```

### 3. Distribution Strategy
```typescript
// 80% above current price
const weight = 0.2;
const side = 'sell';
```

## Risk Management

### Impermanent Loss
- More concentrated = higher IL risk
- Wider ranges = lower IL risk
- Monitor and rebalance regularly

### Capital Efficiency vs Risk
- Narrow range: High fees, high risk
- Wide range: Lower fees, lower risk
- Find your optimal balance

## Advanced Features

### Multi-Range Positions
- Split liquidity across ranges
- Capture different market scenarios
- Requires multiple positions

### Automated Strategies
- Can build bots for rebalancing
- Monitor active bin changes
- Adjust based on metrics

## Integration with Other Protocols

### After DBC Migration
- DLMM pools often created for graduated tokens
- Higher capital efficiency than standard AMMs
- Attracts professional market makers

### Complement to DAMM V2
- Use DLMM for active management
- Use DAMM V2 for passive positions
- Different risk/reward profiles

## Useful Commands

```bash
# Check pool state
pnpm studio dlmm-get-active-bin

# Create new position
pnpm studio dlmm-create-balanced-position

# List positions
pnpm studio dlmm-get-positions-list

# Claim all fees
pnpm studio dlmm-claim-fees
```

## Best Practices

1. **Start Small**: Test strategies with small amounts
2. **Monitor Actively**: DLMM requires more attention than standard AMMs
3. **Understand Risks**: Higher returns come with higher risks
4. **Use Analytics**: Track performance metrics
5. **Stay Informed**: Market conditions change rapidly

## Next Steps

After creating position:
1. Monitor price movements
2. Track fee accumulation
3. Plan rebalancing strategy
4. Consider hedging if needed
5. Optimize based on performance

## Related Documentation
- Parent: `studio/LLM.txt`
- Standard AMMs: `studio/damm-v2/LLM.txt`
- Token Launches: `studio/dbc/LLM.txt`
