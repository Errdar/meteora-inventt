# LLM.txt - Dynamic Bonding Curve (DBC)

This directory contains AI-automatable scripts for token launches using Meteora's Dynamic Bonding Curve protocol.

## DBC Overview

Dynamic Bonding Curve enables:
- Permissionless token launches with automatic price discovery
- Customizable bonding curves for different launch strategies
- Automatic migration to AMM pools when curve completes
- Fair launch mechanics with anti-bot protection

## Available Scripts

### 1. Quick Launch (`pnpm studio dbc-quick-launch`)
**Location**: `quick-launch/src/launch-pool.ts`
**Key Parameters**:
```typescript
const tokenParams = {
  name: 'PUMP IT Token',        // Token full name
  symbol: 'PUMP',               // Token ticker (3-10 chars)
  uri: 'https://...',          // Metadata URI (image/description)
};
const configKey = new PublicKey('...'); // Use Moonshot or custom
```

### 2. Create Config (`pnpm studio dbc-create-config`)
**Location**: `create-config/src/create-config.ts`
**Key Parameters**:
```typescript
const configParams = {
  tokenAVaultInitialBalance: 800_000_000, // Initial supply
  tokenBVaultInitialBalance: 30,          // Initial SOL
  maxBuyAmountInTokenB: 5,                // Max buy per tx
  completeCurveTokenAmount: 63_000_000,   // Migration threshold
};
```

### 3. Create Partner Metadata (`pnpm studio dbc-create-partner-metadata`)
**Location**: `create-config/src/create-partner-metadata.ts`

### 4. Simulate Curve (`pnpm studio dbc-simulate-curve`)
**Location**: `create-config/src/simulate-curve.ts`

### 5. Migrate to DAMM V1 (`pnpm studio dbc-migrate-to-damm-v1`)
**Location**: `migrate-pool/src/migrate-to-damm-v1.ts`

### 6. Migrate to DAMM V2 (`pnpm studio dbc-migrate-to-damm-v2`)
**Location**: `migrate-pool/src/migrate-to-damm-v2.ts`

### 7. Swap Buy (`pnpm studio dbc-swap-buy`)
**Location**: `swap/src/swap-buy.ts`

### 8. Swap Quote (`pnpm studio dbc-swap-quote`)
**Location**: `swap/src/swap-quote.ts`

## Common Config Keys

### Mainnet Configs
- **Moonshot**: `FbKf76ucsQssF7XZBuzScdJfugtsSKwZFYztKsMEhWZM`
- **Standard**: Check Meteora docs for latest configs

### Config Parameters Explained
- `tokenAVaultInitialBalance`: Initial token supply in curve
- `tokenBVaultInitialBalance`: Initial SOL/USDC in curve
- `maxBuyAmountInTokenB`: Anti-whale protection
- `completeCurveTokenAmount`: When to migrate to AMM

## Token Launch Workflow

### 1. Prepare Token Metadata
```json
{
  "name": "Token Name",
  "symbol": "SYMBOL",
  "description": "Token description",
  "image": "https://...",
  "twitter": "https://twitter.com/...",
  "telegram": "https://t.me/...",
  "website": "https://..."
}
```
Upload to IPFS or similar, get URI.

### 2. Configure Launch Script
Edit `quick-launch/src/launch-pool.ts`:
```typescript
const tokenParams = {
  name: 'Your Token Name',
  symbol: 'SYMBOL',
  uri: 'your-metadata-uri'
};
```

### 3. Execute Launch
```bash
pnpm studio dbc-quick-launch
```

### 4. Save Output
```
Generated base mint: [TOKEN_ADDRESS]
Transaction: https://solscan.io/tx/[TX_HASH]
Trade on Jup Pro: https://jup.ag/tokens/[TOKEN_ADDRESS]
```

### 5. Monitor Progress
- Watch bonding curve fills on explorer
- Auto-migrates to AMM at completion
- Or manually migrate using migration scripts

## Advanced Features

### Custom Bonding Curves
1. Create custom config with desired parameters
2. Test with simulate-curve script
3. Use config key in launch script

### Token Address Grinding
The launch script attempts to match token address prefix with symbol:
```typescript
// Tries to generate address starting with symbol
// e.g., PUMP â†’ PUMPxxxxx...
```

### Partner Integration
1. Create partner metadata
2. Set custom fees and parameters
3. Use partner config for launches

## Common Issues and Solutions

### "Config not found"
- Verify config key is correct
- Check you're on correct network

### "Insufficient balance"
- Need SOL for:
  - Transaction fees (~0.01 SOL)
  - Rent for accounts (~0.002 SOL)
  - Initial curve liquidity (if providing)

### "Token already exists"
- Each mint address must be unique
- Generate new keypair for token

### "Simulation failed"
- Check all parameters are valid
- Ensure metadata URI is accessible
- Verify wallet has permissions

## Best Practices

1. **Test on Devnet First**
   - Use devnet config keys
   - Get free SOL from faucet
   - Verify entire flow works

2. **Prepare Metadata Properly**
   - Host on reliable service (IPFS, Arweave)
   - Include all social links
   - Use high-quality images

3. **Plan Launch Timing**
   - Consider network congestion
   - Coordinate with community
   - Have migration plan ready

4. **Security Considerations**
   - Never reuse token keypairs
   - Verify config parameters
   - Double-check addresses

## Migration Guidelines

### When to Migrate
- Bonding curve reaches completion threshold
- Community requests AMM features
- Need advanced liquidity options

### Migration Options
1. **Automatic**: Happens at curve completion
2. **Manual V2**: Recommended for control
3. **Manual V1**: Legacy option

## Useful Commands

```bash
# Launch token
pnpm studio dbc-quick-launch

# Check curve status
pnpm studio dbc-swap-quote

# Manual migration
pnpm studio dbc-migrate-to-damm-v2
```

## Next Steps

After token launch:
1. Monitor bonding curve progress
2. Engage community
3. Plan post-migration liquidity
4. Consider additional pools on DAMM V2
5. Set up liquidity incentives

## Related Documentation
- Parent: `studio/LLM.txt`
- AMM Pools: `studio/damm-v2/LLM.txt`
- Liquidity: `studio/dlmm/LLM.txt`
