# LLM.txt - Dynamic AMM V2 (DAMM V2)

This directory contains AI-automatable scripts for creating and managing AMM pools using Meteora's Dynamic AMM V2 protocol.

## DAMM V2 Overview

Dynamic AMM V2 features:
- Constant-product AMM (x*y=k) with advanced features
- SPL and Token 2022 support
- Dynamic fees and on-chain fee scheduler
- Position NFTs for liquidity tracking
- Built-in farming mechanisms
- Flexible liquidity locks
- Immediate fee claiming (no lock period)

## Available Scripts

### 1. Create Pool (`pnpm studio damm-v2-create-pool`)
**Location**: `create-pool/src/create-pool.ts`
**Key Parameters**:
```typescript
const poolParams = {
  tokenAMint: new PublicKey('...'),     // First token mint
  tokenBMint: new PublicKey('...'),     // Second token mint (often USDC/SOL)
  tokenAAmount: 1000000,                 // Initial token A liquidity
  tokenBAmount: 1000,                    // Initial token B liquidity
  feeBps: 30,                           // Fee in basis points (0.3%)
};
```

### 2. Get Configs (`pnpm studio damm-v2-get-configs`)
**Location**: `create-pool/src/get-configs.ts`

### 3. Create Position (`pnpm studio damm-v2-create-position`)
**Location**: `manage-position/src/create-position.ts`
**Key Parameters**:
```typescript
const positionParams = {
  pool: new PublicKey('...'),           // Pool address
  tokenAAmount: 1000000,                // Amount of token A
  tokenBAmount: 1000,                   // Amount of token B
  slippageBps: 100,                    // Slippage tolerance (1%)
};
```

### 4. Get Positions (`pnpm studio damm-v2-get-positions`)
**Location**: `manage-position/src/get-positions.ts`

### 5. Lock Position (`pnpm studio damm-v2-lock-position`)
**Location**: `manage-position/src/lock-position.ts`
**Key Parameters**:
```typescript
const lockParams = {
  position: new PublicKey('...'),       // Position NFT address
  lockDuration: 86400 * 30,            // Lock duration in seconds (30 days)
};
```

### 6. Withdraw Liquidity (`pnpm studio damm-v2-withdraw-liquidity`)
**Location**: `manage-position/src/withdraw-liquidity.ts`

### 7. Get Position Fees (`pnpm studio damm-v2-get-position-fees`)
**Location**: `claim-fees/src/get-position-fees.ts`

### 8. Claim Position Fees (`pnpm studio damm-v2-claim-position-fees`)
**Location**: `claim-fees/src/claim-position-fees.ts`

## Pool Creation Workflow

### 1. Prepare Token Information
```typescript
// Ensure you have:
// - Token A mint address
// - Token B mint address (usually USDC or SOL)
// - Initial liquidity amounts
// - Desired fee tier
```

### 2. Configure Pool Parameters
Edit `create-pool/src/create-pool.ts`:
```typescript
const tokenAMint = new PublicKey('YOUR_TOKEN_MINT');
const tokenBMint = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'); // USDC
const tokenAAmount = 1_000_000 * 10**9;  // 1M tokens (adjust decimals)
const tokenBAmount = 1_000 * 10**6;      // 1K USDC
const feeBps = 30;                       // 0.3% fee
```

### 3. Create Pool
```bash
pnpm studio damm-v2-create-pool
```

### 4. Save Pool Address
```
Pool created: [POOL_ADDRESS]
Transaction: https://solscan.io/tx/[TX_HASH]
```

## Liquidity Management Workflow

### 1. Add Liquidity
```bash
# Configure amounts in create-position script
pnpm studio damm-v2-create-position
```

### 2. Monitor Position
```bash
# Check all positions
pnpm studio damm-v2-get-positions

# Check specific position fees
pnpm studio damm-v2-get-position-fees
```

### 3. Claim Fees
```bash
pnpm studio damm-v2-claim-position-fees
```

### 4. Withdraw Liquidity
```bash
pnpm studio damm-v2-withdraw-liquidity
```

## Fee Configuration

### Standard Fee Tiers
- **0.01%** (1 bps): Stable pairs (USDC/USDT)
- **0.05%** (5 bps): Correlated assets
- **0.30%** (30 bps): Standard pairs
- **1.00%** (100 bps): Volatile pairs

### Dynamic Fee Features
- Fees can be scheduled to change over time
- Useful for launch events or promotions
- Configure in pool creation parameters

## Position Management

### Position NFTs
- Each liquidity position is represented by NFT
- NFT tracks ownership and fee accrual
- Can be transferred or sold

### Liquidity Locking
Benefits:
- Earn additional rewards
- Show commitment to community
- Prevent rug pulls

Lock Durations:
- 7 days: Short-term
- 30 days: Standard
- 90 days: Long-term
- Custom: Any duration

## Common Issues and Solutions

### "Pool already exists"
- Check if pool exists using explorer
- Use existing pool address for positions

### "Insufficient balance"
- Need both tokens for liquidity
- Account for fees and rent
- Check token decimals

### "Slippage exceeded"
- Increase slippage tolerance
- Add liquidity in smaller amounts
- Check for large trades affecting price

### "Position not found"
- Verify position NFT ownership
- Check correct wallet is connected
- Ensure position wasn't burned

## Best Practices

### 1. Pool Creation
- Research optimal fee tier
- Provide balanced initial liquidity
- Consider Token 2022 features if applicable

### 2. Liquidity Provision
- Start with small amounts to test
- Monitor impermanent loss
- Claim fees regularly

### 3. Risk Management
- Understand impermanent loss
- Don't provide more than you can afford
- Consider locking for stability

## Advanced Features

### Concentrated Liquidity
- Focus liquidity in specific price ranges
- Higher capital efficiency
- Requires active management

### Farming Integration
- Pools can have built-in rewards
- No need for separate staking
- Automatic distribution to LPs

### Fee Token Selection
- Choose which token to receive fees in
- Can be tokenA, tokenB, or both
- Configure in position parameters

## Integration with DBC

### Post-Migration Setup
After DBC migration to DAMM V2:
1. Pool is automatically created
2. Initial liquidity from bonding curve
3. Can add additional liquidity
4. Set up farming rewards if desired

## Choosing Between DAMM V1 and V2

### Use DAMM V2 When
- Need position NFTs for tracking
- Want dynamic fee capabilities
- Require Token 2022 support
- Need immediate fee access
- Want built-in farming

### Consider DAMM V1 When
- Want additional yield from Dynamic Vaults
- Prefer simpler mechanics
- Have existing V1 positions

## Useful Commands

```bash
# Create new pool
pnpm studio damm-v2-create-pool

# Add liquidity
pnpm studio damm-v2-create-position

# Check positions
pnpm studio damm-v2-get-positions

# Claim all fees
pnpm studio damm-v2-claim-position-fees
```

## Pool Analysis

Before creating pool:
1. Check if pool already exists
2. Analyze similar pools' performance
3. Consider liquidity depth needed
4. Plan fee structure

## Next Steps

After pool creation:
1. Add initial liquidity
2. Share pool on aggregators
3. Set up analytics monitoring
4. Consider farming rewards
5. Engage liquidity providers

## Related Documentation
- Parent: `studio/LLM.txt`
- Token Launch: `studio/dbc/LLM.txt`
- Concentrated Liquidity: `studio/dlmm/LLM.txt`
- Alternative AMM: `studio/damm-v1/LLM.txt`
